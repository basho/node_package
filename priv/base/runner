#!/bin/sh
# -*- tab-width:4;indent-tabs-mode:nil -*-
# ex: ts=4 sw=4 et

# installed by node_package (github.com/basho/node_package)

# Pull environment for this install
. "{{runner_bin_dir}}/lib/env.sh"

# Make sure the user running this script is the owner and/or su to that user
check_user $@
ES=$?
if [ "$ES" -ne 0 ]; then
    exit $ES
fi


# Make sure CWD is set to runner run dir
cd $RUNNER_RUN_DIR

# Check the first argument for instructions
case "$1" in
    start)
        # Make sure there is not already a node running
        node_down_check
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi

        # Sanity check the app.config file
        check_config > /dev/null
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi

        # Warn the user if ulimit is too low
        check_ulimit

        HEART_COMMAND="$RUNNER_SCRIPT_DIR/$RUNNER_SCRIPT start"
        export HEART_COMMAND
        mkdir -p $PIPE_DIR
        $ERTS_PATH/run_erl -daemon $PIPE_DIR/ $RUNNER_LOG_DIR \
            "exec $RUNNER_SCRIPT_DIR/$RUNNER_SCRIPT console" 2>&1
        ;;

    stop)
        UNAME_S=`uname -s`
        case $UNAME_S in
            Darwin)
                # Make sure we explicitly set this because iTerm.app doesn't for
                # some reason.
                COMMAND_MODE=unix2003
        esac

        # Wait for the node to completely stop...
        case $UNAME_S in
            Linux|Darwin|FreeBSD|DragonFly|NetBSD|OpenBSD)
                # PID COMMAND
                PID=`ps ax -o pid= -o command=|\
                    grep "$RUNNER_BIN_DIR/.*/[b]eam"|awk '{print $1}'`
                ;;
            SunOS)
                # PID COMMAND
                PID=`ps -ef -o pid= -o args=|\
                    grep "$RUNNER_BIN_DIR/.*/[b]eam"|awk '{print $1}'`
                ;;
        esac

        $NODETOOL stop
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi

        while `kill -s 0 $PID 2>/dev/null`;
        do
            sleep 1
        done
        ;;

    restart)
        ## Restart the VM without exiting the process
        $NODETOOL restart
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi
        ;;

    reboot)
        ## Restart the VM completely (uses heart to restart it)
        $NODETOOL reboot
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi
        ;;

    ping)
        ## See if the VM is alive
        ping_node
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi
        ;;

    attach)
        # Allow attaching to a node without pinging it
        if [ "$2" = "-f" ]; then
          echo "Forcing connection..."
        else
          # Make sure a node is running
          node_up_check
          ES=$?
          if [ "$ES" -ne 0 ]; then
              exit $ES
          fi
        fi

        shift
        exec $ERTS_PATH/to_erl $PIPE_DIR
        ;;

    console)
        RES=`ping_node`
        if [ "$RES" = "pong" ]; then
            echo "Node is already running - use '$SCRIPT attach' instead"
            exit 1
        fi

        # Sanity check the app.config file
        check_config
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi

        # Warn the user if ulimit -n is less than the defined threshold
        check_ulimit

        # Make sure log directory exists
        mkdir -p $RUNNER_LOG_DIR

        # Setup beam-required vars
        ROOTDIR=$RUNNER_BIN_DIR
        BINDIR=$RUNNER_BIN_DIR/erts-$ERTS_VSN/bin
        EMU=beam
        PROGNAME=`echo $0 | sed 's/.*\///'`
        CMD="$BINDIR/erlexec -boot $RUNNER_BIN_DIR/releases/$APP_VSN/$RUNNER_SCRIPT \
            -embedded -config $RUNNER_ETC_DIR/app.config \
            -args_file $RUNNER_ETC_DIR/vm.args -- ${1+"$@"}"
        export EMU
        export ROOTDIR
        export BINDIR
        export PROGNAME

        # Dump environment info for logging purposes
        echo "Exec: $CMD"
        echo "Root: $ROOTDIR"

        # Log the startup
        logger -t "$SCRIPT[$$]" "Starting up"

        # Start the VM
        exec $CMD
        ;;

    ertspath)
        echo $ERTS_PATH
        ;;
    chkconfig)
        check_config
        ;;
    escript)
        shift
        $ERTS_PATH/escript "$@"
        ;;
    version)
        echo $APP_VERSION
        ;;

    *)
        echo "Usage: $SCRIPT {start|stop|restart|reboot|ping|console|attach|ertspath|chkconfig|escript|version}"
        exit 1
        ;;
esac

exit 0
