#! /bin/bash
### BEGIN INIT INFO
# Provides:          {{package_name}}
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: {{package_shortdesc}}
# Description:       {{package_desc}}
### END INIT INFO

DESC="{{package_shortdesc}}"
NAME={{package_install_name}}
DAEMON=/usr/sbin/$NAME
SCRIPTNAME=/etc/init.d/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Startup with the appropriate user
    start-stop-daemon --start \
        --name {{package_install_name}} \
        --user {{package_install_user}} \
        --exec $DAEMON -- start \
        || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Identify the erts directory
    ERTS_PATH=`$DAEMON ertspath`

    # Attempt a clean shutdown.
    $DAEMON stop

    # Make sure it's down by using a more direct approach
    start-stop-daemon --stop \
                      --quiet \
                      --retry=TERM/30/KILL/5 \
                      --user {{package_install_user}} \
                      --exec $ERTS_PATH/run_erl
    return $?
}

#
# Function that graceful reload the daemon/service
#
do_reload() {
    # Restart the VM without exiting the process
    $DAEMON restart && return $? || return 2
}


case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    ping)
        # See if the VM is alive
        $DAEMON ping || exit $?
        ;;
    reload|force-reload)
        log_daemon_msg "Reloading $DESC" "$NAME"
        do_reload
        log_end_msg $?
        ;;
    restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|ping|restart|force-reload}" >&2
        exit 3
        ;;
esac

:
